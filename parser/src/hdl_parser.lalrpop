use std::str::FromStr;
use ast;

grammar;

pub Code: ast::Code = {
    <m:Entity+> => ast::Code(m),
};

Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Entity: ast::Entity = { // (1)
    "entity" <i:Ident> "(" <a:EntityArgs> ")" "{" <b:EntityBody> "}" => {
        ast::Entity(i, a, b)
    },
};

EntityArgs = Comma<EntityArg>;

EntityArg: (ast::Ident, ast::Dir, Option<i32>) = {
    //(r"[^{}]+" "{" Inner "}")* => (),
    <d:EntityArgType> <i:Ident> ":" "bit" "[" <a:Num> "]" => (i, d, Some(a.to_i32())),
    <d:EntityArgType> <i:Ident> ":" "bit" => (i, d, None),
};

EntityArgType: ast::Dir = {
    "out" => ast::Dir::Out,
    "in" => ast::Dir::In,
};

EntityBody: Vec<ast::Decl> = {
    <v:(Decl)*> => v,
};

Ident: ast::Ident = {
    r"[a-zA-Z_][0-9A-Za-z_]*" => ast::Ident(<>.to_string()),
};

Num: ast::Expr = {
    r"\d+" => ast::Expr::Num(i32::from_str(<>).unwrap()),
    r"0b[01]+" => ast::Expr::Num(i32::from_str_radix(&<>[2..], 2).unwrap()),
    r"0x[0-9a-fA-F]+" => ast::Expr::Num(i32::from_str_radix(&<>[2..], 16).unwrap()),
};

Decl: ast::Decl = {
    "let" <i:Ident> ";" => {
        ast::Decl::Reg(i, None)
    },
    "let" <i:Ident> "=" <v:Expr> ";" => {
        ast::Decl::Reg(i, Some(v))
    },
    "let" <i:Ident> ":" "bit" "[" <a:Num> "]" "=" <v:Expr> ";" => {
        ast::Decl::RegArray(i, a, Some(v))
    },
    "let" <i:Ident> ":" "bit" "[" <a:Num> "]" ";" => {
        ast::Decl::RegArray(i, a, None)
    },
    "let" <i:Ident> ":" "uint" "{" <d:Num?> ".." <a:Num> "}" "=" <v:Expr> ";" => {
        //TODO need to adjust register approximation
        let width = u32::next_power_of_two(a.to_i32() as u32).trailing_zeros() + 3;
        ast::Decl::RegArray(i, ast::Expr::Num(width as i32), Some(v))
    },
    "let" <i:Ident> "=" <e:Ident> "{" <args:Comma<KeyPair>> "}" ";" => {
        ast::Decl::Let(i, e, args)
    },
    "const" <i:Ident> "=" <v:Expr> ";" => {
        ast::Decl::Const(i, v)
    },
    "on" <sig:Ident> "." <edge:Edge> "{" <b:SeqStatements> "}" => {
        ast::Decl::On(ast::EdgeRef(sig, edge), b)
    },
    "always" "{" <b:CombStatements> "}" => {
        ast::Decl::Always(b)
    },
};

KeyPair: (ast::Ident, ast::Expr) = {
    <k:Ident> ":" <v:Expr> => {
      (k, v)
    },
};

Edge: ast::Edge = {
    "posedge" => ast::Edge::Pos,
    "negedge" => ast::Edge::Neg,
};

CombStatements: ast::CombBlock = {
    <CombStatement*> => ast::CombBlock(<>),
};

CombStatement: ast::Comb = {
    <i:Ident> "=" <e:Expr> ";" => ast::Comb::Assign(i, e),
};

SeqStatements: ast::SeqBlock = {
    <SeqStatement*> => ast::SeqBlock(<>),
};

pub SeqStatement: ast::Seq = {
    "if" <c:Expr> "{" <t:SeqStatements> "}"
    "else" "{" <e:SeqStatements> "}" ";"? => {
        ast::Seq::If(c, t, Some(e))
    },
    "if" <c:Expr> "{" <t:SeqStatements> "}"
    "else" "if" <c2:Expr> "{" <e:SeqStatements> "}" ";"? => {
        ast::Seq::If(c, t, Some(ast::SeqBlock(vec![ast::Seq::If(c2, e, None)])))
    },
    "if" <c:Expr> "{" <t:SeqStatements> "}" ";"? => {
        ast::Seq::If(c, t, None)
    },
    "match" <cond:Expr> "{" <arms:MatchArm+> "}" ";"? => {
        ast::Seq::Match(cond, arms)
    },

    "while" <c:Expr> "{" <b:SeqStatements> "}" ";"? => {
        ast::Seq::While(c, b)
    },
    "loop" "{" <b:SeqStatements> "}" ";"? => {
        ast::Seq::Loop(b)
    },
    "fsm" "{" <b:SeqStatements> "}" ";"? => {
        ast::Seq::Fsm(b)
    },
    "yield" ";" => {
        ast::Seq::Yield
    },
    "await" <e:Expr> ";" => {
        ast::Seq::Await(e)
    },

    <i:Ident> <b:BlockType> <v:Expr> ";" => {
        ast::Seq::Set(b, i, v)
    },
    <i:Ident> "[" <idx:Expr> "]" <b:BlockType> <v:Expr> ";" => {
        ast::Seq::SetIndex(b, i, idx, v)
    },
    <i:Ident> "[" <from:Expr> ":" <to:Expr> "]" <b:BlockType> <v:Expr> ";" => {
        ast::Seq::SetRange(b, i, from, to, v)
    },
};

BlockType: ast::BlockType = {
  ":=" => ast::BlockType::Blocking,
  "<=" => ast::BlockType::NonBlocking,
};

MatchArm: (Vec<ast::Expr>, ast::SeqBlock) = {
    <e:Expr> "=>" <s:SeqStatement> "," => {
        (vec![e], ast::SeqBlock(vec![s]))
    },
    <e:Expr> "=>" "{" <b:SeqStatements> "}" ","? => {
        (vec![e], b)
    },
};

Expr: ast::Expr = {
    "{" <v:Comma<Expr>> "}" => ast::Expr::Concat(v),
    "!" <r:Term> => ast::Expr::Unary(ast::UnaryOp::Not, Box::new(r)),
    <l:Expr> "&&" <r:Expr2> => ast::Expr::Arith(ast::Op::And, Box::new(l), Box::new(r)),
    <l:Expr> "<<" <r:Expr2> => ast::Expr::Arith(ast::Op::LShift, Box::new(l), Box::new(r)),
    <l:Expr> ">>" <r:Expr2> => ast::Expr::Arith(ast::Op::RShift, Box::new(l), Box::new(r)),
    Expr2 => <>,
};

Expr2: ast::Expr = {
    <l:Expr2> "==" <r:Expr3> => ast::Expr::Arith(ast::Op::Eq, Box::new(l), Box::new(r)),
    <l:Expr2> "!=" <r:Expr3> => ast::Expr::Arith(ast::Op::Ne, Box::new(l), Box::new(r)),
    Expr3 => <>,
};

Expr3: ast::Expr = {
    <l:Expr3> "+" <r:Term> => ast::Expr::Arith(ast::Op::Add, Box::new(l), Box::new(r)),
    <l:Expr3> "-" <r:Term> => ast::Expr::Arith(ast::Op::Sub, Box::new(l), Box::new(r)),
    <l:Expr3> "<" <r:Term> => ast::Expr::Arith(ast::Op::Lt, Box::new(l), Box::new(r)),
    <l:Expr3> ">" <r:Term> => ast::Expr::Arith(ast::Op::Gt, Box::new(l), Box::new(r)),
    <l:Expr3> "|" <r:Term> => ast::Expr::Arith(ast::Op::BinOr, Box::new(l), Box::new(r)),
    <l:Expr3> "&" <r:Term> => ast::Expr::Arith(ast::Op::BinAnd, Box::new(l), Box::new(r)),
    Term => <>,
};

Term: ast::Expr = {
    "(" <e:Expr> ")" => e,
    <i:Ident> "[" <l:Expr> ":" <r:Expr> "]" => ast::Expr::Slice(i, Box::new(l), Some(Box::new(r))),
    <i:Ident> "[" <l:Expr> "]" => ast::Expr::Slice(i, Box::new(l), None),
    Ident => ast::Expr::Ref(<>),
    Num => <>,
};
